"""
У медицинской компании есть N пунктов приёма биоматериалов на анализ.
Все пункты расположены вдоль автомагистрали и имеют номера,
соответствующие расстоянию от нулевой отметки до конкретного пункта.
Известно количество пробирок,
которое ежедневно принимают в каждом из пунктов.
Пробирки перевозят в специальных транспортировочных контейнерах
вместимостью V пробирок на расстояние не более M.
Каждый транспортировочный контейнер упаковывается в пункте приёма
и вскрывается только в лаборатории.

Компания планирует открыть лабораторию в одном из пунктов.
Лабораторию расположили в одном из пунктов приёма биоматериалов
таким образом, чтобы перевезти как можно больше контейнеров
(ведь ездить можно на расстояние не более M от текущей точки).
Найдите наибольшее количество контейнеров,
которые понадобятся для перевозки пробирок в лабораторию.

Входные данные. Даны два входных файла (Файл А и Файл В),
содержит в первой строке число N (2 ≤ N ≤ 5 000 000) –
количество пунктов приёма биоматериалов,
и число V (1 ≤ V ≤ 1000) – вместимость транспортировочного контейнера,
и число M (1 ≤ M ≤ 100000) - расстояние,
на которое можно ездить от текущей Ni точки (0 ≤ i < N) .
Каждая из следующих N строк содержит два натуральных числа:
номер пункта и количество пробирок (не превышающее 10000).
Пункты перечислены в произвольном порядке.

Пример входного файла:
6 96 1
3 4
7 3
1 100
10 190
2 200
8 2

При таких исходных данных
(вместимость транспортировочного контейнера равна 96 пробирок)
компании выгодно открыть лабораторию в пункте 2.
В том случае будет перевезено максимальное количество,
равное 200 / 96 + 100 / 96 + 4 / 96 = 3 + 2 + 1 = 6. Ответ: 6.

В ответе укажите два числа:
сначала искомое значение для файла А,
затем для файла B.
"""
a = open("B54.txt")
n, v, m = map(int, a.readline().split())
f = [list(map(int, a.readline().split())) for q in range(n)]
print(max(f, key = lambda a: a[0]))
arr = [0 for i in range(100_000)]
print(n, len(f))
for i in range(n):
    arr[f[i][0]] += (f[i][1])//v if f[i][1]%v==0 else (f[i][1])//v + 1

s = [sum(arr[:2*m+1])]
for i in range(m, n - m - 1):
    s.append(arr[-1]-arr[i-m]+arr[i+m+1])
print(max(s))